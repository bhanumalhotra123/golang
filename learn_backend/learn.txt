Setting up fronend 

Clone the frontend repo

save publishable key in

install nodejs
install npm 

npm start






when you want a function in a package to be public you keep the first letter of its name capital.


func Myfunc() {}     ---> Here first letter is capital



package main

import "backend_for_a_user_interface/testpackage"  -------> imported the package

func main() {
	testpackage.Myfunc()       ---------> here we are importing the function

}



package testpackage

import "fmt"

func Myfunc() {          --------> first letter capital
	fmt.Println("step1")    --------> First letter P is capital [which means Println is a public function in fmt package(which is part of go standard library)]
	fmt.Println("step2")
	fmt.Println("step3")
}


fmt is part of go standard library(A standard libraries for many useful packages)


Adding function parameters to function definition:
_________________________________________
Now in Myfunc we don't have any control over what is called

First we need to understand when we call a function to our file from some other package we are not the creater of the function.

Imagine a seperate person calls this Myfunc to their main.go than the one who created it in his testpackage.

So now if we are the one who is calling we can't make any changes.

But if we are the creater we can make changes and we can give some power to the people calling this function to alter the function by way of parameters.
(When we are calling the function we call it arguments, when we are defining the function we call it parameters)



package testpackage

import "fmt"

func Myfunc(step int, anotherParameter int) {
	fmt.Println("step1")
	fmt.Println("step2")
	fmt.Println("step3")
}


Now with these changes if we run our main.go which is calling this function.

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run main.go
# command-line-arguments
.\main.go:6:2: not enough arguments in call to testpackage.Myfunc
        have ()
        want (int, int)



First we need to understand datatypes here for more clarity on arguments or parameters.


var step int = 1


Here we are defining a variable named step which is an int and its value is defined as 1.

We are basically saving the value 1 in memory 
  
We use 1 equal sign to assign a value to a variable so we have to use 2 equal sign to equate two things.

func Myfunc(step int) {
	if step == 1 {
		fmt.Println("step1")
	} else if step == 2 {
		fmt.Println("step2")
	} else if step == 3 {
		fmt.Println("step3")
	} else {
		fmt.Println("step not supported")
	}
}

Now we have defined 1 parameter step, Now depending on what value the caller of the function passes for step argument it will get different results.


package main

import (
	"backend_for_a_user_interface/testpackage"
)

func main() {
	var step int = 1
	testpackage.Myfunc(step)

}


Now in our main.go we have defined the value of step as 1.

Result:

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run main.go
step1
  


Now when var step int = 4

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run main.go
step not supported



Datatypes : 
int       We can apply airthmatic to these
string    We can only concatenate them + (- or other won't work)
bool



package main

import "fmt"

func main() {
	var isHappy bool = false
	var something string = "21"
	var somethingelse int = 29

	fmt.Println(isHappy)
	fmt.Println(something)
	fmt.Println(somethingelse)

}


$ go run test.go
false
21
29


These were the basics____________________________________________________________________

_________________________________________

Now we will focus on building th backend for our frontend webpage


First thing create a stripe payments accound and save the publishable key in frontend StripePayment.jsx file.


Our frontend should be able to send requests to our backend

Now we will be writing our code for backend but the requests fron frontend will come over internet (That request is called an http request)

For that we:
import (
	"fmt"
	"net/http"
)

Notice one more thing we use parantheses here to include more than 1 package instead of doing: import "fmt" import "net/http"


Now let us understand:
func HandleFunc(pattern string, handler func(ResponseWriter, *Request))


How frontend calls to specific backend server which is located in someother location(as there can be many servers say for reddit, google, yahoo)?

Say ip of backend server is 172.217.1.46

Now the backend server have 0-65,353 port range we can connect to. say it listens on 2222

So the frontend make calls to 172.217.1.46:2222

But this is not enough our backend should know what to do with the request it gets. So we have to define api endpoints(path to some functionality.)

In this project we will build /create-payment-intent  

Now, the frontend will send request on 172.217.1.46:2222/create-payment-intent  


say this is the path we want in our backend
http://localhost:4242/create-payment-intent


func main() {
	http.HandleFunc("/create-payment-intent")  ------> This is where we define endpoint
}

What about functionality mapped to this /create-payment-intent endpoint?



func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent) ----->here we define the function that will have the functionality for this endpoint.
}

func handleCreatePaymentIntent()  

Now this function handleCreatePaymentIntent have to take two arguments with types as  ResponseWriter and *Request. (these two types comes from http package)

in go you can have your own types as well not .




func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)
}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request)


Now in our function we have defined to handle the functionality of /create-payment-intent, we have added the parameters that anyone using it has to pass them.
 One is w and its type is http.ResponseWriter(this type is created by http package) and second is r and its type is *http.Request


to comment out code use //


Now when we do go run main.go it just executes whatever is in func main and ends

But for server code we need a long living application (which is always listening to the requests)

http package provides that functionality with the function called ListenAndServe


func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)

	http.ListenAndServe("localhost:4242", nil)
}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}
  

localhost:4242 this is the addr
we are giving nil as value of handler

ListenAndServe listens on the TCP network address addr and then calls Serve with handler to handle requests on incoming connections. Accepted connections are configured to enable TCP keep-alives.
  
func ListenAndServe(addr string, handler Handler) error    ------> this function returns a value if error occurs

You put the type after the function of what function should returns

func returnsValue(something string) string {  -----> here string after function defines the type of return
    return "something"
}







package main

import (
	"fmt"
	"net/http"
)

func main() {
	//http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)

	//http.ListenAndServe("localhost:4242", nil)

	var caughtValue = returnsValue("Hello, I will return this back to you")      -----> passing the argument in the function and saving it memory using variable
	fmt.Println(caughtValue)                                                     -----> Printing the value

}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}

func returnsValue(something string) string {            -----> after the function we have given datatype of return
	return something                 ----------------> here we are returning the argument only(you can return anything)
}




PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run main.go
Hello, I will return this back to you




now the type of return value in case of ListenAndServe is err


func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)

	var err error = http.ListenAndServe("localhost:4242", nil)    -----> here we are catching the value returned from the ListenAndServe function, its type is error and we are saving it in a variable named err.
	if err != nil {                   ------------> If err is not equals to nil 
		log.Fatal(err)                -------------> here we use another function named Fatal from the package log to handle the error
	}

}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}




Now frontend and server code(Go application) is running on the same server while developing.

In prod frontend will be running somewhere else and will be sending requests to backend.

Here our server is local machine 

Internal ip of local machine is 127.0.0.1 

There is an ipaddr that maps this ip to localhost (we can use localhost as well)

How we are able to run frontend and backend on same server? because both of them are running on different ports.

frontend send request to 127.0.0.1:backendport    (just for development otherwise backend is on some other server)

We will use postman as frontend for now to send request to backend and test it.


error type is builtin type provided by go





package main

import (
	"errors"
	"fmt"
	"net/http"
)

func main() {
	var err error = returnsError("wrongPassword")
	if err != nil {
		fmt.Println(err)
	}

}

func returnsError(password string) error {

	var secretPassword string = "supersecretpassword"
	if password == secretPassword {
		return nil
	} else {
		return errors.New("invalid password")
	}
}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}



Result:

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run main.go
invalid password


In this we defined a function named returnsError which have a return type error (it has to return and error or nil)

we have a package named function in which we have a function named new which can be used to create our own error(basically this new function takes our string and return it as an error)

then we set the parameter password that should be string and in this function only we defined if the argument passed for password parameter is equals to supersecretpassword than we will return nil
otherwise we will return the error (the New function is used here to return our string as error.)



func returnsError(password string) error {

	var secretPassword string = "supersecretpassword"
	if password == secretPassword {
		return nil
	} else {
		return errors.New("invalid password")
	}
}



Now we pass this function in our main function and pass the argument as wrongPassword (expected is supersecretpassword)
then we saved the error of this function in a variable err and we print err    if err != nil

func main() {
	var err error = returnsError("wrongPassword")
	if err != nil {
		fmt.Println(err)
	}

}


Result:

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run main.go
invalid password









___________________________________________________________________________________________________

Our application should be long running, but assume if there is some issue in the server code.

package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)

	var err error = http.ListenAndServe("invalid", nil)    --------------------> Incorrect address
	if err != nil {
		log.Fatal(err)
	}

}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}


PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go
2023/10/03 17:27:01 listen tcp: address invalid: missing port in address
exit status 1


___________________________________________________________________________________________________

To invoke the function we use ()

for example: we should use 

handleCreatePaymentIntent()  in our main function to execute it.


But if you will notice that  we are not using () parantheses here 

func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)

	var err error = http.ListenAndServe("localhost:4242", nil)
	if err != nil {
		log.Fatal(err)
	}

}


we are just passing the handleCreatePaymentIntent as a argument

So basically handle function is invoked by http.HandleFunc whenever there is a request at /create-payment-intent


To understand this better:
_________________________________________

package main

import (
	"fmt"
	"net/http"
)

func main() {

	functionOne(anotherFunction)

}

func functionOne(functionTwo func()) {
	functionTwo()                          -----------------> Here we are calling the same function which are passing as attribute
}

func anotherFunction() {
	fmt.Println("anotherFunction was called")
}



Result of this:
PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go
anotherFunction was called


In programming when you can pass a function as an argument it is called  the language that supports 1st class function.

___________________________________________________________________________________________________


Now testing this :

package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)

	log.Println("Listening on localhost:4242")
	var err error = http.ListenAndServe("localhost:4242", nil)
	if err != nil {
		log.Fatal(err)
	}

}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}


PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go  
2023/10/09 17:23:39 Listening on localhost:4242


Now in postman checking the endpoint:

GET localhost:4242/create-payment-intent SEND

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go  
2023/10/09 17:23:39 Listening on localhost:4242
Endpoint was called
Endpoint was called
Endpoint was called



What if we call a endpoint which we never created?

localhost:4242/health

in postman we get this: 404 page not found




Now if we add the health endpoint too
___________________________________________________________________________________________________


func main() {
	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)
	http.HandleFunc("/health", handlehealth)

	log.Println("Listening on localhost:4242")
	var err error = http.ListenAndServe("localhost:4242", nil)
	if err != nil {
		log.Fatal(err)
	}

}

func handleCreatePaymentIntent(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint was called")
}

func handlehealth(w http.ResponseWriter, r *http.Request) {
	fmt.Println("OK!")
}



2023/10/09 18:04:16 Listening on localhost:4242
OK!
OK!
OK!


__________________________________________________________________________________


Here we don't know who is sending the request.

Before we solve this we have to understand few things:


  earlier we learned how to save a single value in memory using variables

  var name string = "Bhanuman"

Slice to declare a list of items

Do define slice we use [] brackets here.

var names []string = [] string{"Bhanu", "shivam", "arsh", "akash", "ashiq", "sandeep"}

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go  
[Bhanu shivam arsh akash ashiq sandeep]


Each of these names can be called using index.

index starts from 0


func main() {

	var names []string = []string{"Bhanu", "shivam", "arsh", "akash", "ashiq", "sandeep"}

	fmt.Println(names[2])

}




PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go  
arsh





	var names []int = []int{1, 2, 3, 4}

	fmt.Println(names[2])


Go is a type safe language you have to declare type everywhere
Type saftey saves from disasters!!

Now let us use slice in our code.



func handlehealth(writer http.ResponseWriter, rqquest *http.Request) {
	
}


When the requester sends a request we want to send a response back server is running to the requester.




	var someNumber int = 22
	var numberAsString string = string(someNumber)


	//It will look like "22"



Similarly we convert a string into a slice of bytes

package main

import (
	"fmt"
	"net/http"
)

func main() {

	var responseString string = "Server is up and running"
	var response []byte = []byte(responseString)

	fmt.Println(response)
}


decimal value of the character

PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go  
[83 101 114 118 101 114 32 105 115 32 117 112 32 97 110 100 32 114 117 110 110 105 110 103]

https://www.charset.org/utf-8

83 is equivalent to S

101 is equivalent to e

and so on.....

32 is space

__________________________________________________________________________________

In golang you can receive multiple return values from a function.

func returnsMultiple() (string, int, bool){

	return "string", 1, true
}


Here this function will return  3 seperate values 

When we store the respone of this function in a variable we will have to store 3 different values.

var something string = returnsMultiple()   this gives error as we are only catching a string.




a new way to assign value

someString, someInt, someBool := returnsMultiple()


what is := ?   this is shortcut 

go infers the type of variable from the function returnsMultiple 

It follows the same order for referencing the type which is in the function

that is first is string then int and last bool 




or this is a thisIsAString := "string"

here go infers the type from "string"



func handlehealth(w http.ResponseWriter, r *http.Request) {
	 response := []byte("Server is up and running")

	 _, err := writer.Write(response) -------> here Write function returns two values is int other is error. To ignore int we use _

	 someString, someInt, someBool := returnsMultiple()
}




Now we handle the error, in go we always have to handle the errors.


func handlehealth(writer http.ResponseWriter, request *http.Request) {
	response := []byte("Server is up and running")

	_, err := writer.Write(response)
	if err != nil {
		fmt.Println(err)
	}

}




Now when we hit the endpoint    localhost:4242/health

this handlehealth function gets invoked which takes two parameters 

the parameter writer have a value of http.ResponseWriter

writer.Write method of an http.ResponseWriter object takes a byte slice 

so here we convert our string response "Server is up and running" into a byte slice

which is then placed in writer.Write

now we put that equal to a variable 

_, err            why this? writer.Write takes a byte as argument and gives out an integer and an error types as response.

So we are ignoring int and just catching the error as err

and if err comes up we print it.





You create a byte slice containing the response message: response := []byte("Server is up and running").


You use writer.Write(response) to write this byte slice to the http.ResponseWriter object, which effectively sends the response to the client.


localhost:4242/health



in response: Server is up and running




Now if you stop the server and hit the endpoint you will get the error



Now the other parameter that is health is a request that the server receives


If sender sends us some request with a message we can read it

in handleCreatePayment function that is what we want to do and also we have to make it check if the sender is using correct request.


In case of creating a payment request we post some data  related to product and more.

 
So we want that request to be POST only.




func handleCreatePaymentIntent(writer http.ResponseWriter, request *http.Request) {
	if request.Method != "POST" {
		http.Error(writer, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return

	}
}





localhost:4242/create-payment-intent

Method Not Allowed



func handleCreatePaymentIntent(writer http.ResponseWriter, request *http.Request) {
	if request.Method != "POST" {
		http.Error(writer, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return

	}
	fmt.Println("request method was correct !")
}


It will print of terminal if it is correct method.





What happens when user wants to buy a product on front-end?

front-end sends the request to payment gateway
  

Frontend       Stripe server    our backend go server


frontend  ---> Create payment intent request ---> Go server ---> create payment intent request ---> stripe server

stripe payment sends payment intent request it created and copy of customer key to backend and backend sends it further to frontend

when frontend confirms ---> frontend sends confirm payment request to stripe server with key and stripe 






How do we get to know about packages?

reading! Documentation

https://pkg.go.dev/net/http 


https://pkg.go.dev/std


Use Ctrl + click to check any code it will take it to how it is built by golang.




if we are using variables we can change the values later 

	DoesChange := 22
	fmt.Println(DoesChange)

	DoesChange = 32
	fmt.Println(DoesChange)

	both will be printed


The following won't work

		const DoesChange = 22
	fmt.Println(DoesChange)

	const DoesChange = 32
	fmt.Println(DoesChange)




var variableName string      here we declare a variable

var variableName string = "something"  here we assign a value


variableName := "something" do both together





Struct
_________________________________________
whoever sends request to the endpoint has to confirm to this structure  

func handleCreatePaymentIntent(writer http.ResponseWriter, request *http.Request) {
	if request.Method != "POST" {
		http.Error(writer, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return

	}
	var req struct {       --------------------> we define the structure here
    	ProductId string `json:"product_id"` -------> all of these has to be capitalised so as to export
		FirstName string `json:"first_name"`
		LastName  string `json:"last_name"`
		Address1  string `json:"address_1"`
		Address2  string `json:"address_2"`
		City      string `json:"city"`
		State     string `json:"state"`
		Zip       string `json:"zip""`
		Country   string `json:"country"`
	}

	err := json.NewDecoder(request.Body).Decode(&req)  -----> this takes the body of request which is in json decodes it and saves it in req using a pointer.
    if err != nil
	    log.Println(err)
		return
    }


Now if this you send invalid structure using postman to the endpoint
you still get 200 response

If we write response to the writer the default is 200


  err := json.NewDecoder(request.Body).Decode(&req)  -----> this takes the body of request which is in json decodes it and saves it in req using a pointer.
    if err != nil
	    http.Error(writer, err.Error(), http.StatusInternalServerError)  -------> err.Error() this is how you convert err into a string.
		return
    




now we add some print statements


package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

func main() {

	http.HandleFunc("/create-payment-intent", handleCreatePaymentIntent)
	http.HandleFunc("/health", handlehealth)

	log.Println("Listening on localhost:4242")
	var err = http.ListenAndServe("localhost:4242", nil)
	if err != nil {
		log.Fatal(err)
	}
}

func handleCreatePaymentIntent(writer http.ResponseWriter, request *http.Request) {
	if request.Method != "POST" {
		http.Error(writer, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
		return

	}
	var req struct {
		ProductId string `json:"product_id"`
		FirstName string `json:"first_name"`
		LastName  string `json:"last_name"`
		Address1  string `json:"address_1"`
		Address2  string `json:"address_2"`
		City      string `json:"city"`
		State     string `json:"state"`
		Zip       string `json:"zip""`
		Country   string `json:"country"`
	}

	err := json.NewDecoder(request.Body).Decode(&req)
	if err != nil {
		http.Error(writer, err.Error(), http.StatusInternalServerError)
		return
	}
	fmt.Println(req.FirstName)         -----------------------------------> here we added some print statements 
	fmt.Println(req.Country)
}

func handlehealth(writer http.ResponseWriter, request *http.Request) {
	response := []byte("Server is up and running")

	_, err := writer.Write(response)
	if err != nil {
		fmt.Println(err)
	}

}



I sent this as request from postman on localhost:4242/create-payment-intent     :

{
    "productid": "test product id",
    "first_name": "Bhanu",
    "last_name": "Malhotra",
    "address_1":"haha",
    "address_2":"hahaha",
    "city":"chinchpokli",
    "state":"Admiringyou",
    "zip":"252550",
    "country":"Babe bhangra paunde ne"
}



I got 200

and on terminal


PS C:\Users\LENOVO\Desktop\go\projects\src\backend_for_a_user_interface> go run server.go  
2023/10/10 11:29:23 Listening on localhost:4242
Bhanu
Babe bhangra paunde ne


this gets printed



The most important value we need is of product_id as we get to know the price from it.


In general we don't send this data to stripe we save it in a db.




https://pkg.go.dev/github.com/stripe/stripe-go/v72


https://github.com/stripe/stripe-go


First we try to write code of creating a payment intent and then we will do the imports.

We first need to create the parameters that we need to pass to stripe api to create the intent.

		City      string `json:"city"`
		State     string `json:"state"`
		Zip       string `json:"zip""`
		Country   string `json:"country"`
	}

	err := json.NewDecoder(request.Body).Decode(&req)
	if err != nil {
		http.Error(writer, err.Error(), http.StatusInternalServerError)
		return
	}
}

params := &stripe.PaymentIntentParams{

}

&stripe comes from stripe library , PaymentIntentParams as well.

we send these params to stripe api and in response it sends us back payment intent


	params := &stripe.PaymentIntentParams{
		Amount: stripe.Int64(cacluteOrderAmout(req.ProductId)), ----> here we convert the response of our function into Int64 type of stripe
	}


then we download

go get -u github.com/stripe/stripe-go/v75



func calculateOrderAmount(ProductId string) int64 {
	switch productId {                  --------------> just a cleaner way to write if else statements
	case "Forever Pants":
		return 26000
	case "Forever Shirt":
		return 15500
	case "Forever Shorts":
		return 30000
	}
	return 0

}



	params := &stripe.PaymentIntentParams{
		Amount:   stripe.Int64(cacluteOrderAmout(req.ProductId)),
		Currency: stripe.String(string(stripe.CurrencyUSD)),
	}

	here in the currency first we convert CurrencyUSD type of stripe into a normal string type and then we convert it into stripe string type.

	(stripe hasn't provided a way to directly convert its CurrencyUSD type into its string)

	 

	 	params := &stripe.PaymentIntentParams{
		Amount:   stripe.Int64(cacluteOrderAmout(req.ProductId)),
		Currency: stripe.String(string(stripe.CurrencyUSD)),
		AutomaticPaymentMethods: &stripe.PaymentIntentAutomaticPaymentMethodsParams{  ---> this takes a struct as value(if it is enabled it takes the payment methods that you have included in dashboard)
			Enabled: stripe.Bool(true),
		},
	}



params := &stripe.PaymentIntentParams{
		Amount:   stripe.Int64(calculateOrderAmount(req.ProductId)),
		Currency: stripe.String(string(stripe.CurrencyUSD)),
		AutomaticPaymentMethods: &stripe.PaymentIntentAutomaticPaymentMethodsParams{
			Enabled: stripe.Bool(true),
		},
	}

	paymentIntent, err := paymentintent.New(params)
	if err != nil {
		http.Error(writer, err.Error(), http.StatusInternalServerError)
	}
	fmt.Println(paymentIntent.ClientSecret)
}

now we send params to strip api and asks for paymentintent from it
if it is successful we ask for clientSecret that is a key we have to send to frontend.

I sent request to the endpoint with Forever Pants as productid

[ERROR] Request error from Stripe (status 401): {"status":401,"message":"You did not provid
e an API key. You need to provide your API key in the Authorization header, using Bearer au
th (e.g. 'Authorization: Bearer YOUR_SECRET_KEY'). See https://stripe.com/docs/api#authenti
cation for details, or we can help at https://support.stripe.com/.","type":"invalid_request
_error"}



when we have to call api of stripe we have to provide a key to it so as to access it.

we save the key taken from dashboard to main function.

stripe.Key = "sk_test_5" 


We hit the endpoint again and it was successful and we get the ClientSecret

that we have to send to frontend so that it can use it to talk to stripe when customer confirms the order.


So now we will create a struct back to frontend







Before when we created struct for req we decoded it as from postman we were sending json 


But now we are sending response to frontend

so we need to convert go code into json



	var response struct {
		ClientSecret string `json:"clientSecret"`
	}

	response.ClientSecret = paymentIntent.ClientSecret

	var buf bytes.Buffer
	err = json.NewEncoder(&buf).Encode(response)
	if err != nil {
		http.Error(writer, err.Error(), http.StatusInternalServerError)
	}
	writer.Header().Set("Content-Type", "application/json")        -----> we are adding in response header that it is  json 

	io.Copy(writer, &buf)            -----------------> this copies the stream from buffer into writer until the end of the line(entire buffer has been return to the writer)
}


The buf variable is a bytes.Buffer object, which is a software implementation of a buffer. The json.NewEncoder() function takes a io.Writer interface as an argument, which is used to write the encoded JSON data to. In this case, we are passing in the buf variable.

The json.NewEncoder() function will encode the response object into a JSON byte slice and write it to the buf variable. If there is any error encoding the object, the err variable will be set to the error.

Once the json.NewEncoder() function has encoded the JSON data, we can get the encoded byte slice by calling the Bytes() method on the buf variable. This byte slice can then be written to a file or sent over a network.


In your code, the json.NewEncoder() function will encode the response object into a JSON byte slice and write it to the buf variable. The buf variable will then contain a bytes.Buffer object that contains the encoded JSON byte slice.




Now when i hit the endpoint i got this as response which is in json (i got it on postman not terminal)

{
    "clientSecret": "pi_3NzcuSSJ6IvxwWc40Haoiev3_secret_rWboRHuXGoUBYCpepk0Drx0cc"
}


Now when customer confirms the endpoint frontend uses this json object and send it to stripe api to confirm the payment.



Now we have to connect things


now going we deleted previous data in payments section of stripe

and again sent a request to endpoint for pants as product_id

now we saw in payments section of stripe a incomplete payment requst of $260 was there which had same client secret which we had received.

but it is incomplete it will only get complete once frontend confirms it


Remember we updated our frontend with publishable key? StripePayment.jsx in src directory of frontend code



after this it was just testing and i was able to make test payments using test cards



TLS will be required for production.

